# Generated using halfpipe cli version 0.0.0-DEV
resources:
- name: git
  type: git
  source:
    branch: 6.5.1
    paths:
    - e2e/artifacts
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  check_every: 10m
- name: artifacts
  type: gcp-resource
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-artifacts-651
    json_key: ((halfpipe-artifacts.private_key))
  check_every: 24h
- name: artifacts-on-failure
  type: gcp-resource
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-artifacts-651
    json_key: ((halfpipe-artifacts.private_key))
  check_every: 24h
resource_types:
- name: gcp-resource
  type: registry-image
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/gcp-resource
    tag: stable
    username: _json_key
jobs:
- name: create-artifact
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  on_failure:
    in_parallel:
      steps:
      - put: artifacts-on-failure
        params:
          folder: artifacts-out-failure
          postfix: failure
          version_file: git/.git/ref
        attempts: 2
  plan:
  - in_parallel:
      steps:
      - get: git
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: create-artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: alpine
          tag: latest
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      run:
        path: /bin/sh
        args:
        - -c
        - |-
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../.git/ref`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact .halfpipe.io.yml ../../../artifacts-out-failure/e2e/artifacts
            copyArtifact ../../.halfpipe.io.yml ../../../artifacts-out-failure
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact someFile ../../../artifacts-out/e2e/artifacts
          copyArtifact ../parentDir/someFile2 ../../../artifacts-out/e2e/parentDir
        dir: git/e2e/artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts-out
      - name: artifacts-out-failure
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  - put: artifacts
    params:
      folder: artifacts-out
      version_file: git/.git/ref
    timeout: 1h
    attempts: 2
- name: read-artifact
  serial: true
  build_log_retention:
    minimum_succeeded_builds: 1
  plan:
  - in_parallel:
      steps:
      - get: git
        passed:
        - create-artifact
        trigger: true
        attempts: 2
      fail_fast: true
    timeout: 1h
  - task: get-artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-artifacts-651
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
    attempts: 2
  - task: read-artifact
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: alpine
          tag: latest
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      run:
        path: /bin/sh
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          # Copying in artifacts from previous task
          cp -r ../../../artifacts/. ../..

          export GIT_REVISION=`cat ../../.git/ref`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/artifacts
      inputs:
      - name: git
      - name: artifacts
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1

