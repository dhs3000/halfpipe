# Generated using halfpipe cli version 0.0.0-DEV
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: task1
  on_failure:
    attempts: 2
    params:
      channel: '#yo'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: Pipeline `$BUILD_PIPELINE_NAME`, task `$BUILD_JOB_NAME` failed <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
    put: slack
    timeout: 15m
  on_success:
    attempts: 2
    params:
      channel: '#yo'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-succeeded.png
      text: Pipeline `$BUILD_PIPELINE_NAME`, task `$BUILD_JOB_NAME` succeeded <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
    put: slack
    timeout: 15m
  plan:
  - attempts: 2
    get: git
    timeout: 15m
    trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          repository: alpine
          tag: latest
        type: registry-image
      inputs:
      - name: git
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/notifications
        path: /bin/sh
    task: task1
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: task2
  on_failure:
    attempts: 2
    in_parallel:
      fail_fast: true
      steps:
      - params:
          channel: kehe
          icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
          text: Nooooes >:c
          username: Halfpipe
        put: slack
      - params:
          channel: whoop
          icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
          text: Nooooes >:c
          username: Halfpipe
        put: slack
    timeout: 15m
  on_success:
    attempts: 2
    in_parallel:
      fail_fast: true
      steps:
      - params:
          channel: asdf
          icon_url: https://concourse.halfpipe.io/public/images/favicon-succeeded.png
          text: Wiiiie! \o/
          username: Halfpipe
        put: slack
      - params:
          channel: prws
          icon_url: https://concourse.halfpipe.io/public/images/favicon-succeeded.png
          text: Wiiiie! \o/
          username: Halfpipe
        put: slack
    timeout: 15m
  plan:
  - attempts: 2
    get: git
    passed:
    - task1
    timeout: 15m
    trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          repository: alpine
          tag: latest
        type: registry-image
      inputs:
      - name: git
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/notifications
        path: /bin/sh
    task: task2
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/notifications/manifest.yml
      timeout: 1h
    put: halfpipe-cleanup
    resource: cf-snpaas-pe-staging
    timeout: 1h
  name: deploy to staging
  on_failure:
    attempts: 2
    params:
      channel: '#yo'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: Pipeline `$BUILD_PIPELINE_NAME`, task `$BUILD_JOB_NAME` failed <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
    put: slack
    timeout: 15m
  on_success:
    attempts: 2
    params:
      channel: '#yo'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-succeeded.png
      text: Pipeline `$BUILD_PIPELINE_NAME`, task `$BUILD_JOB_NAME` succeeded <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
    put: slack
    timeout: 15m
  plan:
  - attempts: 2
    get: git
    passed:
    - task2
    timeout: 15m
    trigger: true
  - attempts: 2
    params:
      appPath: git/e2e/notifications
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/notifications/manifest.yml
      testDomain: springernature.app
      timeout: 1h
      vars:
        A: "0.1"
        B: "false"
    put: halfpipe-push
    resource: cf-snpaas-pe-staging
    timeout: 1h
  - attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/notifications/manifest.yml
      timeout: 1h
    put: halfpipe-check
    resource: cf-snpaas-pe-staging
    timeout: 1h
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-fly
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      params:
        A: blah
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        TEST_ROUTE: halfpipe-example-kotlin-dev-staging-CANDIDATE.springernature.app
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/notifications
        path: /bin/sh
    task: run-a
    timeout: 1h
  - attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/notifications/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    put: halfpipe-promote
    resource: cf-snpaas-pe-staging
    timeout: 1h
  serial: true
resource_types:
- check_every: 24h
  name: slack-resource
  source:
    repository: cfcommunity/slack-notification-resource
    tag: v1.5.0
  type: registry-image
- name: cf-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/cf-resource-v2
    tag: stable
    username: _json_key
  type: registry-image
resources:
- check_every: 10m
  name: git
  source:
    branch: master
    paths:
    - e2e/notifications
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 24h
  name: slack
  source:
    url: ((halfpipe-slack.webhook))
  type: slack-resource
- check_every: 24h
  name: cf-snpaas-pe-staging
  source:
    api: ((cloudfoundry.api-snpaas))
    org: pe
    password: very-secret
    space: staging
    username: michiel
  type: cf-resource

