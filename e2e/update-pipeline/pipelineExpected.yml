# Generated using halfpipe cli version 0.0.0-DEV
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: update
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        trigger: true
      - get: cron
        trigger: true
  - config:
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-auto-update
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      params:
        CONCOURSE_PASSWORD: ((concourse.password))
        CONCOURSE_TEAM: ((concourse.team))
        CONCOURSE_URL: ((concourse.url))
        CONCOURSE_USERNAME: ((concourse.username))
        HALFPIPE_DOMAIN: halfpipe.io
        HALFPIPE_PROJECT: halfpipe-io
        PIPELINE_NAME: halfpipe-e2e-update-pipeline
      platform: linux
      run:
        dir: git/e2e/update-pipeline
        path: update-pipeline
    task: update
  - params:
      bump: minor
    put: version
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: Test
  on_failure:
    params:
      folder: artifacts-out-failure
      postfix: failure
      version_file: git/.git/ref
    put: artifacts-on-failure
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - update
      - get: version
        passed:
        - update
        trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          repository: node
          tag: 9.5.0-alpine
        type: registry-image
      inputs:
      - name: git
      - name: version
      outputs:
      - name: artifacts-out
      - name: artifacts-out-failure
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      platform: linux
      run:
        args:
        - -c
        - |-
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact .halfpipe.io.yml ../../../artifacts-out-failure/e2e/update-pipeline
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact target/distribution ../../../artifacts-out/e2e/update-pipeline/target
          copyArtifact README.md ../../../artifacts-out/e2e/update-pipeline
        dir: git/e2e/update-pipeline
        path: /bin/sh
    task: test
    timeout: 1h
  - params:
      folder: artifacts-out
      version_file: git/.git/ref
    put: artifacts
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 5m
    put: halfpipe-cleanup
    resource: cf-dev-api-halfpipe-team-dev
    timeout: 5m
  name: deploy to cf
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - Test
      - get: version
        passed:
        - Test
        trigger: true
  - config:
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-update-pipeline
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      platform: linux
      run:
        args:
        - .
        dir: artifacts
        path: /opt/resource/download
    task: get-artifact
  - params:
      appPath: artifacts/e2e/update-pipeline/target/distribution/artifact.zip
      buildVersionPath: version/version
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    put: halfpipe-push
    resource: cf-dev-api-halfpipe-team-dev
  - params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 5m
    put: halfpipe-check
    resource: cf-dev-api-halfpipe-team-dev
  - params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: some.random.domain.com
      timeout: 5m
    put: halfpipe-promote
    resource: cf-dev-api-halfpipe-team-dev
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 1h
    put: halfpipe-cleanup
    resource: cf-snpaas-pe-staging
    timeout: 1h
  name: deploy to staging
  on_failure:
    params:
      folder: artifacts-out-failure
      postfix: failure
      version_file: git/.git/ref
    put: artifacts-on-failure
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - deploy to cf
      - get: version
        passed:
        - deploy to cf
        trigger: true
  - config:
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-update-pipeline
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      platform: linux
      run:
        args:
        - .
        dir: artifacts
        path: /opt/resource/download
    task: get-artifact
  - params:
      appPath: git/e2e/update-pipeline
      buildVersionPath: version/version
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: springernature.app
      timeout: 1h
      vars:
        A: "0.1"
        B: "false"
    put: halfpipe-push
    resource: cf-snpaas-pe-staging
  - params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 1h
    put: halfpipe-check
    resource: cf-snpaas-pe-staging
  - in_parallel:
      fail_fast: true
      steps:
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            source:
              password: ((halfpipe-gcr.private_key))
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          - name: artifacts
          - name: version
          params:
            A: blah
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            TEST_ROUTE: halfpipe-example-kotlin-dev-staging-CANDIDATE.springernature.app
          platform: linux
          run:
            args:
            - -c
            - |
              if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              # Copying in artifacts from previous task
              cp -r ../../../artifacts/. ../..

              export GIT_REVISION=`cat ../../.git/ref`
              export BUILD_VERSION=`cat ../../../version/version`

              ./smoke-test.sh
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/update-pipeline
            path: /bin/sh
        task: run-smoke-test.sh
        timeout: 1h
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            source:
              password: ((halfpipe-gcr.private_key))
              repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
              tag: stable
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          - name: version
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            CONSUMER_GIT_KEY: ((halfpipe-github.private_key))
            CONSUMER_GIT_URI: git@github.com:springernature/c-consumer
            CONSUMER_HOST: c-host
            CONSUMER_PATH: ""
            CONSUMER_SCRIPT: /var/c-script
            DOCKER_COMPOSE_SERVICE: ""
            GCR_PRIVATE_KEY: ((halfpipe-gcr.private_key))
            GIT_CLONE_OPTIONS: ""
            PROVIDER_HOST: halfpipe-example-kotlin-dev-staging-CANDIDATE.springernature.app
            PROVIDER_HOST_KEY: HALFPIPE_E2E_UPDATE_PIPELINE_DEPLOYED_HOST
            PROVIDER_NAME: halfpipe-e2e-update-pipeline
          platform: linux
          run:
            args:
            - -c
            - |
              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              export GIT_REVISION=`cat ../../.git/ref`
              export BUILD_VERSION=`cat ../../../version/version`

              \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io

              # write git key to file
              echo "${CONSUMER_GIT_KEY}" > .gitkey
              chmod 600 .gitkey

              set -ex

              # get current revision of consumer, revert to HEAD if not found
              REVISION=$(curl -fsSL "${CONSUMER_HOST}/internal/version" | jq -r '.revision' || echo "")
              if [ "${REVISION}" == "" ]; then
                echo "Error fetching version of consumer from ${CONSUMER_HOST}/internal/version - using HEAD instead."
                REVISION=HEAD
              fi

              # clone consumer into "consumer-repo" dir
              GIT_SSH_COMMAND="ssh -o StrictHostKeychecking=no -i .gitkey" git clone ${GIT_CLONE_OPTIONS} ${CONSUMER_GIT_URI} consumer-repo
              cd consumer-repo/${CONSUMER_PATH}

              # checkout revision
              git checkout ${REVISION}

              # run the tests with docker-compose
              # note: old system reads CF manifest env vars and sets them all here
              docker-compose run --no-deps \
                --entrypoint "${CONSUMER_SCRIPT}" \
                -e DEPENDENCY_NAME=${PROVIDER_NAME} \
                -e ${PROVIDER_HOST_KEY}=${PROVIDER_HOST} \
                -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME \
                -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache \
                ${DOCKER_COMPOSE_SERVICE:-code}

              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/update-pipeline
            path: docker.sh
        privileged: true
        task: c-name
        timeout: 1h
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            source:
              password: ((halfpipe-gcr.private_key))
              repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
              tag: stable
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          - name: version
          outputs:
          - name: artifacts-out-failure
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            GCR_PRIVATE_KEY: ((halfpipe-gcr.private_key))
            HALFPIPE_CACHE_TEAM: halfpipe-team
            TEST_ROUTE: halfpipe-example-kotlin-dev-staging-CANDIDATE.springernature.app
          platform: linux
          run:
            args:
            - -c
            - |
              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              copyArtifact() {
                ARTIFACT=$1
                ARTIFACT_OUT_PATH=$2

                if [ -e $ARTIFACT ] ; then
                  mkdir -p $ARTIFACT_OUT_PATH
                  cp -r $ARTIFACT $ARTIFACT_OUT_PATH
                else
                  echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
                  exit 1
                fi
              }

              export GIT_REVISION=`cat ../../.git/ref`
              export BUILD_VERSION=`cat ../../../version/version`

              \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io
              docker-compose  run -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME -e BUILD_VERSION -e GIT_REVISION -e HALFPIPE_CACHE_TEAM -e TEST_ROUTE -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache app

              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                # Artifacts to copy in case of failure
                copyArtifact path ../../../artifacts-out-failure/e2e/update-pipeline
                exit 1
              fi
            dir: git/e2e/update-pipeline
            path: docker.sh
        privileged: true
        task: run-pre-promote-step-in-docker-compose
        timeout: 1h
  - params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    put: halfpipe-promote
    resource: cf-snpaas-pe-staging
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 1h
    put: halfpipe-cleanup
    resource: cf-snpaas-qa
    timeout: 1h
  name: deploy to qa
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - deploy to cf
      - get: version
        passed:
        - deploy to cf
        trigger: true
  - config:
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-update-pipeline
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      platform: linux
      run:
        args:
        - .
        dir: artifacts
        path: /opt/resource/download
    task: get-artifact
  - params:
      appPath: git/e2e/update-pipeline
      buildVersionPath: version/version
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: springernature.app
      timeout: 1h
      vars:
        A: "0.1"
        B: "false"
    put: halfpipe-push
    resource: cf-snpaas-qa
  - params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/update-pipeline/manifest.yml
      timeout: 1h
    put: halfpipe-check
    resource: cf-snpaas-qa
  - in_parallel:
      fail_fast: true
      steps:
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            source:
              password: ((halfpipe-gcr.private_key))
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          - name: version
          params:
            A: blah
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            TEST_ROUTE: halfpipe-example-kotlin-dev-qa-CANDIDATE.springernature.app
          platform: linux
          run:
            args:
            - -c
            - |
              if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              export GIT_REVISION=`cat ../../.git/ref`
              export BUILD_VERSION=`cat ../../../version/version`

              ./smoke-test.sh
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/update-pipeline
            path: /bin/sh
        task: save-artifact-in-pre-promote
        timeout: 1h
      - config:
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
          image_resource:
            source:
              password: ((halfpipe-gcr.private_key))
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
            type: registry-image
          inputs:
          - name: git
          - name: artifacts
          - name: version
          params:
            A: blah
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            TEST_ROUTE: halfpipe-example-kotlin-dev-qa-CANDIDATE.springernature.app
          platform: linux
          run:
            args:
            - -c
            - |
              if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:buster-slim as an alternative"
                echo ""
                echo ""
              fi

              # Copying in artifacts from previous task
              cp -r ../../../artifacts/. ../..

              export GIT_REVISION=`cat ../../.git/ref`
              export BUILD_VERSION=`cat ../../../version/version`

              ./smoke-test.sh
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/update-pipeline
            path: /bin/sh
        task: restore-artifact-in-pre-promote
        timeout: 1h
  - params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/update-pipeline/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    put: halfpipe-promote
    resource: cf-snpaas-qa
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: push to docker registry
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - deploy to staging
        - deploy to qa
      - get: version
        passed:
        - deploy to staging
        - deploy to qa
        trigger: true
  - attempts: 1
    params:
      build: git/e2e/update-pipeline
      build_args:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: b
      dockerfile: git/e2e/update-pipeline/Dockerfile
      tag_as_latest: true
      tag_file: version/number
    put: halfpipe-fly
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: run notify.sh
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - push to docker registry
      - get: version
        passed:
        - push to docker registry
        trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          password: blah
          repository: busy
          tag: latest
          username: michiel
        type: registry-image
      inputs:
      - name: git
      - name: version
      params:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: b
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          ./notify.sh
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/update-pipeline
        path: /bin/sh
    task: run-notify.sh
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: docker-compose
  on_failure:
    params:
      folder: artifacts-out-failure
      postfix: failure
      version_file: git/.git/ref
    put: artifacts-on-failure
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - run notify.sh
      - get: version
        passed:
        - run notify.sh
        trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: version
      outputs:
      - name: artifacts-out-failure
      params:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        GCR_PRIVATE_KEY: ((halfpipe-gcr.private_key))
        HALFPIPE_CACHE_TEAM: halfpipe-team
      platform: linux
      run:
        args:
        - -c
        - |
          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io
          docker-compose  run -e A -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME -e BUILD_VERSION -e GIT_REVISION -e HALFPIPE_CACHE_TEAM -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache app

          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact docker-compose.yml ../../../artifacts-out-failure/e2e/update-pipeline
            exit 1
          fi
        dir: git/e2e/update-pipeline
        path: docker.sh
    privileged: true
    task: docker-compose
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: another-c-name
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - docker-compose
      - get: version
        passed:
        - docker-compose
        trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: version
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        CONSUMER_GIT_KEY: ((halfpipe-github.private_key))
        CONSUMER_GIT_URI: git@github.com:springernature/c-consumer
        CONSUMER_HOST: c-host
        CONSUMER_PATH: ""
        CONSUMER_SCRIPT: c-script
        DOCKER_COMPOSE_SERVICE: potato
        GCR_PRIVATE_KEY: ((halfpipe-gcr.private_key))
        GIT_CLONE_OPTIONS: ""
        K: value
        K1: value1
        PROVIDER_HOST: p-host
        PROVIDER_HOST_KEY: HALFPIPE_E2E_UPDATE_PIPELINE_DEPLOYED_HOST
        PROVIDER_NAME: halfpipe-e2e-update-pipeline
      platform: linux
      run:
        args:
        - -c
        - |
          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io

          # write git key to file
          echo "${CONSUMER_GIT_KEY}" > .gitkey
          chmod 600 .gitkey

          set -ex

          # get current revision of consumer, revert to HEAD if not found
          REVISION=$(curl -fsSL "${CONSUMER_HOST}/internal/version" | jq -r '.revision' || echo "")
          if [ "${REVISION}" == "" ]; then
            echo "Error fetching version of consumer from ${CONSUMER_HOST}/internal/version - using HEAD instead."
            REVISION=HEAD
          fi

          # clone consumer into "consumer-repo" dir
          GIT_SSH_COMMAND="ssh -o StrictHostKeychecking=no -i .gitkey" git clone ${GIT_CLONE_OPTIONS} ${CONSUMER_GIT_URI} consumer-repo
          cd consumer-repo/${CONSUMER_PATH}

          # checkout revision
          git checkout ${REVISION}

          # run the tests with docker-compose
          # note: old system reads CF manifest env vars and sets them all here
          docker-compose run --no-deps \
            --entrypoint "${CONSUMER_SCRIPT}" \
            -e DEPENDENCY_NAME=${PROVIDER_NAME} \
            -e ${PROVIDER_HOST_KEY}=${PROVIDER_HOST} \
            -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME -e K -e K1 \
            -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache \
            ${DOCKER_COMPOSE_SERVICE:-code}

          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/update-pipeline
        path: docker.sh
    privileged: true
    task: another-c-name
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: deploy-ml-zip
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - another-c-name
      - get: version
        passed:
        - another-c-name
        trigger: true
  - config:
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-update-pipeline
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      platform: linux
      run:
        args:
        - .
        dir: artifacts
        path: /opt/resource/download
    task: get-artifact
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-ml-deploy
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: artifacts
      - name: version
      params:
        APP_NAME: halfpipe-e2e-update-pipeline
        DEPLOY_ZIP: target/xquery.zip
        MARKLOGIC_HOST: ml.dev.springer-sbm.com
        MARKLOGIC_PASSWORD: ((halfpipe-ml-deploy.password))
        MARKLOGIC_USERNAME: ((halfpipe-ml-deploy.username))
        USE_BUILD_VERSION: "false"
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          # Copying in artifacts from previous task
          cp -r ../../../artifacts/. ../..

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          /ml-deploy/deploy-local-zip
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/update-pipeline
        path: /bin/sh
    task: deploy-ml-zip
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: Deploy ml-modules artifact
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - deploy-ml-zip
      - get: version
        passed:
        - deploy-ml-zip
        trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-ml-deploy
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: version
      params:
        APP_NAME: my-app
        APP_VERSION: v1
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        MARKLOGIC_HOST: ml.dev.springer-sbm.com,ml.qa1.springer-sbm.com
        MARKLOGIC_PASSWORD: ((halfpipe-ml-deploy.password))
        MARKLOGIC_USERNAME: ((halfpipe-ml-deploy.username))
        ML_MODULES_VERSION: "2.1425"
        USE_BUILD_VERSION: "false"
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          /ml-deploy/deploy-ml-modules
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/update-pipeline
        path: /bin/sh
    task: deploy-ml-modules-artifact
    timeout: 1h
  serial: true
resource_types:
- name: cron-resource
  source:
    repository: cftoolsmiths/cron-resource
    tag: v0.3
  type: registry-image
  unique_version_history: true
- name: gcp-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/gcp-resource
    tag: stable
    username: _json_key
  type: registry-image
- name: cf-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/cf-resource-v2
    tag: stable
    username: _json_key
  type: registry-image
resources:
- check_every: 10m
  name: git
  source:
    branch: ""
    paths:
    - e2e/update-pipeline
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 1m
  name: cron
  source:
    expression: '* * * * *'
    fire_immediately: true
    location: UTC
  type: cron-resource
- check_every: 24h
  name: artifacts
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-update-pipeline
    json_key: ((halfpipe-artifacts.private_key))
  type: gcp-resource
- check_every: 24h
  name: artifacts-on-failure
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-update-pipeline
    json_key: ((halfpipe-artifacts.private_key))
  type: gcp-resource
- name: version
  source:
    bucket: ((halfpipe-semver.bucket))
    driver: gcs
    json_key: ((halfpipe-semver.private_key))
    key: halfpipe-team-halfpipe-e2e-update-pipeline-
  type: semver
- check_every: 24h
  name: halfpipe-fly
  source:
    password: verysecret
    repository: springerplatformengineering/halfpipe-fly
    username: rob
  type: docker-image
- check_every: 24h
  name: cf-dev-api-halfpipe-team-dev
  source:
    api: dev-api
    org: halfpipe-team
    password: very-secret
    space: dev
    username: michiel
  type: cf-resource
- check_every: 24h
  name: cf-snpaas-pe-staging
  source:
    api: ((cloudfoundry.api-snpaas))
    org: pe
    password: very-secret
    space: staging
    username: michiel
  type: cf-resource
- check_every: 24h
  name: cf-snpaas-qa
  source:
    api: ((cloudfoundry.api-snpaas))
    org: ((cloudfoundry.org-snpaas))
    password: ((cloudfoundry.password-snpaas))
    space: qa
    username: ((cloudfoundry.username-snpaas))
  type: cf-resource

