# Generated using halfpipe cli version 0.0.0-DEV
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: test
  plan:
  - attempts: 2
    get: git
    timeout: 15m
    trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          repository: appropriate/curl
          tag: latest
        type: registry-image
      inputs:
      - name: git
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`

          \echo hello
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/docker-decompose-feature
        path: /bin/sh
    task: test
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: two-services
  plan:
  - attempts: 2
    get: git
    passed:
    - test
    timeout: 15m
    trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: bar
        F: foo
        GCR_PRIVATE_KEY: ((halfpipe-gcr.private_key))
        HALFPIPE_CACHE_TEAM: halfpipe-team
      platform: linux
      run:
        args:
        - -c
        - |
          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`

          \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io
          docker-compose -f docker-compose-2-services.yml run -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME -e B -e F -e GIT_REVISION -e HALFPIPE_CACHE_TEAM -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache customservice echo hello

          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/docker-decompose-feature
        path: docker.sh
    privileged: true
    task: two-services
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/e2e/docker-decompose-feature/manifest.yml
      timeout: 1h
    put: halfpipe-cleanup
    resource: cf-mp-api-my-org-my-space
    timeout: 1h
  name: deploy-cf
  plan:
  - attempts: 2
    get: git
    passed:
    - two-services
    timeout: 15m
    trigger: true
  - attempts: 2
    params:
      appPath: git/e2e/docker-decompose-feature
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/docker-decompose-feature/manifest.yml
      testDomain: test.com
      timeout: 1h
    put: halfpipe-push
    resource: cf-mp-api-my-org-my-space
    timeout: 1h
  - attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/e2e/docker-decompose-feature/manifest.yml
      timeout: 1h
    put: halfpipe-check
    resource: cf-mp-api-my-org-my-space
    timeout: 1h
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          repository: appropriate/curl
          tag: latest
        type: registry-image
      inputs:
      - name: git
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        TEST_ROUTE: halfpipe-example-kotlin-dev-my-space-CANDIDATE.test.com
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`

          \echo hello
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/docker-decompose-feature
        path: /bin/sh
    task: test2
    timeout: 1h
  - attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/e2e/docker-decompose-feature/manifest.yml
      testDomain: test.com
      timeout: 1h
    put: halfpipe-promote
    resource: cf-mp-api-my-org-my-space
    timeout: 1h
  serial: true
resource_types:
- name: cf-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/cf-resource-v2
    tag: stable
    username: _json_key
  type: registry-image
resources:
- check_every: 10m
  name: git
  source:
    branch: master
    paths:
    - e2e/docker-compose
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 24h
  name: cf-mp-api-my-org-my-space
  source:
    api: mp-api
    org: my-org
    password: ((cloudfoundry.password))
    space: my-space
    username: ((cloudfoundry.username))
  type: cf-resource

