# Generated using halfpipe cli version 0.0.0-DEV
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: update
  plan:
  - attempts: 2
    get: git
    timeout: 15m
    trigger: true
  - attempts: 2
    config:
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: eu.gcr.io/halfpipe-io/halfpipe-auto-update
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      params:
        CONCOURSE_PASSWORD: ((concourse.password))
        CONCOURSE_TEAM: ((concourse.team))
        CONCOURSE_URL: ((concourse.url))
        CONCOURSE_USERNAME: ((concourse.username))
        HALFPIPE_DOMAIN: halfpipe.io
        HALFPIPE_FILE_PATH: .halfpipe.io
        HALFPIPE_PROJECT: halfpipe-io
        PIPELINE_NAME: pipeline-name
      platform: linux
      run:
        dir: git/e2e/concourse/deploy-katee
        path: update-pipeline
    task: update
    timeout: 15m
  - attempts: 2
    no_get: true
    params:
      bump: minor
    put: version
    timeout: 15m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: Push default
  plan:
  - attempts: 2
    in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - update
      - get: version
        passed:
        - update
        trigger: true
    timeout: 15m
  - config:
      image_resource:
        name: ""
        source:
          repository: alpine
        type: docker-image
      inputs:
      - name: git
      - name: version
      outputs:
      - name: tagList
      platform: linux
      run:
        args:
        - -c
        - |-
          GIT_REF=`[ -f git/.git/ref ] && cat git/.git/ref || true`
          VERSION=`[ -f version/version ] && cat version/version || true`
          printf "%s %s latest" "$GIT_REF" "$VERSION" > tagList/tagList
          printf "Image will be tagged with: %s\n" $(cat tagList/tagList)
        path: /bin/sh
    task: create-tag-list
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          repository: concourse/oci-build-task
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: image
      params:
        BUILD_ARG_ARTIFACTORY_PASSWORD: ((artifactory.password))
        BUILD_ARG_ARTIFACTORY_URL: ((artifactory.url))
        BUILD_ARG_ARTIFACTORY_USERNAME: ((artifactory.username))
        BUILD_ARG_RUNNING_IN_CI: "true"
        CONTEXT: git/e2e/concourse/deploy-katee
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
        DOCKERFILE: git/e2e/concourse/deploy-katee/Dockerfile
      platform: linux
      run:
        args:
        - -c
        - |-
          mkdir ~/.docker
          echo $DOCKER_CONFIG_JSON > ~/.docker/config.json
          build
        path: /bin/sh
    privileged: true
    task: build
    timeout: 1h
  - config:
      image_resource:
        name: ""
        source:
          repository: aquasec/trivy
        type: docker-image
      inputs:
      - name: git
      - name: image
      platform: linux
      run:
        args:
        - -c
        - |-
          [ -f .trivyignore ] && echo "Ignoring the following CVE's due to .trivyignore" || true
          [ -f .trivyignore ] && cat .trivyignore; echo || true
          trivy image --timeout 15m --ignore-unfixed --severity CRITICAL --scanners vuln --exit-code 0 --input ../../../../image/image.tar || true
        dir: git/e2e/concourse/deploy-katee
        path: /bin/sh
    task: trivy
    timeout: 1h
  - no_get: true
    params:
      additional_tags: tagList/tagList
      image: image/image.tar
    put: someimage
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: deploy to katee
  on_failure:
    attempts: 2
    no_get: true
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: Pipeline `$BUILD_PIPELINE_NAME`, task `$BUILD_JOB_NAME` failed. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME_URLENCODED/builds/$BUILD_NAME|View
        Pipeline>
      username: Halfpipe
    put: slack
    timeout: 15m
  plan:
  - attempts: 2
    in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - Push default
      - get: version
        passed:
        - Push default
        trigger: true
    timeout: 15m
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: eu.gcr.io/halfpipe-io/ee-katee-vela-cli
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: version
      params:
        DOCKER_TAG: buildVersion
        ENV1: "1234"
        ENV2: ((secret.something))
        ENV3: '{"a": "b", "c": "d"}'
        ENV4: ((another.secret))
        KATEE_APPFILE: vela.yaml
        KATEE_ENVIRONMENT: halfpipe-team
        KATEE_GKE_CREDENTIALS: ((katee-halfpipe-team-service-account-prod.key))
        KATEE_NAMESPACE: katee-halfpipe-team
        VERY_SECRET: blah
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../../.git/ref`
          export BUILD_VERSION=`cat ../../../../version/version`

          \echo "Running vela up..."

          if [ "$DOCKER_TAG" == "gitref" ]
          then
            export TAG="$GIT_REVISION"
          else
            export TAG="$BUILD_VERSION"
          fi

          halfpipe-deploy
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/concourse/deploy-katee
        path: /bin/sh
    task: deploy-to-katee
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: deploy to katee different team
  on_failure:
    attempts: 2
    no_get: true
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: Pipeline `$BUILD_PIPELINE_NAME`, task `$BUILD_JOB_NAME` failed. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME_URLENCODED/builds/$BUILD_NAME|View
        Pipeline>
      username: Halfpipe
    put: slack
    timeout: 15m
  plan:
  - attempts: 2
    in_parallel:
      fail_fast: true
      steps:
      - get: git
        passed:
        - deploy to katee
      - get: version
        passed:
        - deploy to katee
        trigger: true
    timeout: 15m
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        name: ""
        source:
          password: ((halfpipe-gcr.private_key))
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: eu.gcr.io/halfpipe-io/ee-katee-vela-cli
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      - name: version
      params:
        DOCKER_TAG: buildVersion
        ENV1: "1234"
        ENV2: ((secret.something))
        ENV3: '{"a": "b", "c": "d"}'
        ENV4: ((another.secret))
        KATEE_APPFILE: vela.yaml
        KATEE_ENVIRONMENT: katee-different-environment
        KATEE_GKE_CREDENTIALS: ((katee-different-namespace-service-account-prod.key))
        KATEE_NAMESPACE: katee-different-namespace
        VERY_SECRET: blah
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../../.git/ref`
          export BUILD_VERSION=`cat ../../../../version/version`

          \echo "Running vela up..."

          if [ "$DOCKER_TAG" == "gitref" ]
          then
            export TAG="$GIT_REVISION"
          else
            export TAG="$BUILD_VERSION"
          fi

          halfpipe-deploy
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/concourse/deploy-katee
        path: /bin/sh
    task: deploy-to-katee
    timeout: 1h
  serial: true
resource_types:
- check_every: 24h0m0s
  name: halfpipe-slack-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/halfpipe-slack-resource
    tag: latest
    username: _json_key
  type: registry-image
resources:
- check_every: 10m0s
  name: git
  source:
    branch: main
    paths:
    - e2e/actions/deploy-katee
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 24h0m0s
  name: slack
  source:
    token: ((halfpipe-slack.token))
  type: halfpipe-slack-resource
- check_every: 24h0m0s
  name: version
  source:
    bucket: ((halfpipe-semver.bucket))
    driver: gcs
    json_key: ((halfpipe-semver.private_key))
    key: halfpipe-team-pipeline-name
  type: semver
- check_every: 24h0m0s
  name: someimage
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/halfpipe-team/someImage
    username: _json_key
  type: registry-image
