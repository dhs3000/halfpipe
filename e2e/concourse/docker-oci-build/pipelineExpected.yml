# Generated using halfpipe cli version 0.0.0-DEV
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: push to docker registry
  plan:
  - attempts: 2
    get: git
    timeout: 15m
    trigger: true
  - config:
      image_resource:
        source:
          repository: alpine
        type: docker-image
      inputs:
      - name: git
      outputs:
      - name: tagList
      platform: linux
      run:
        args:
        - -c
        - |-
          GIT_REF=`[ -f git/.git/ref ] && cat git/.git/ref || true`
          VERSION=`[ -f version/version ] && cat version/version || true`
          printf "%s %s latest" "$GIT_REF" "$VERSION" > tagList/tagList
          printf "Image will be tagged with: %s\n" $(cat tagList/tagList)
        path: /bin/sh
    task: create-tag-list
    timeout: 1h
  - config:
      image_resource:
        source:
          repository: concourse/oci-build-task
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: image
      params:
        BUILD_ARG_ARTIFACTORY_PASSWORD: ((artifactory.password))
        BUILD_ARG_ARTIFACTORY_URL: ((artifactory.url))
        BUILD_ARG_ARTIFACTORY_USERNAME: ((artifactory.username))
        BUILD_ARG_RUNNING_IN_CI: "true"
        CONTEXT: git/e2e/concourse/docker-oci-build
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
        DOCKERFILE: git/e2e/concourse/docker-oci-build/Dockerfile
      platform: linux
      run:
        args:
        - -c
        - |-
          mkdir ~/.docker
          echo $DOCKER_CONFIG_JSON > ~/.docker/config.json
          build
        path: /bin/sh
    privileged: true
    task: build
    timeout: 1h
  - config:
      image_resource:
        source:
          repository: aquasec/trivy
        type: docker-image
      inputs:
      - name: git
      - name: image
      platform: linux
      run:
        args:
        - -c
        - |-
          [ -f .trivyignore ] && echo "Ignoring the following CVE's due to .trivyignore" || true
          [ -f .trivyignore ] && cat .trivyignore; echo || true
          trivy image --ignore-unfixed --severity CRITICAL --exit-code 0 --input ../../../../image/image.tar
        dir: git/e2e/concourse/docker-oci-build
        path: /bin/sh
    task: trivy
    timeout: 1h
  - params:
      additional_tags: tagList/tagList
      image: image/image.tar
    put: halfpipe-fly.thisismy-tag
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: date to file
  plan:
  - attempts: 2
    get: git
    passed:
    - push to docker registry
    timeout: 15m
    trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: alpine
          tag: latest
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts-out
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        RUNNING_IN_CI: "true"
      platform: linux
      run:
        args:
        - -c
        - |-
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../../.git/ref`

          \date > dateFile
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact dateFile ../../../../artifacts-out/e2e/concourse/docker-oci-build
        dir: git/e2e/concourse/docker-oci-build
        path: /bin/sh
    task: date-to-file
    timeout: 1h
  - attempts: 2
    params:
      folder: artifacts-out
      version_file: git/.git/ref
    put: artifacts
    timeout: 15m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: build-with-artifact-and-vars
  plan:
  - attempts: 2
    get: git
    passed:
    - date to file
    timeout: 15m
    trigger: true
  - attempts: 2
    config:
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: halfpipe-team/halfpipe-e2e-docker-oci-build
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      platform: linux
      run:
        args:
        - .
        dir: artifacts
        path: /opt/resource/download
    task: get-artifact
    timeout: 15m
  - config:
      image_resource:
        source:
          repository: alpine
        type: registry-image
      inputs:
      - name: git
      - name: artifacts
      outputs:
      - name: docker_build
      platform: linux
      run:
        args:
        - -c
        - |-
          cp -r git/. docker_build
          cp -r artifacts/. docker_build
        path: /bin/sh
    task: copying-git-repo-and-artifacts-to-a-temporary-build-dir
    timeout: 1h
  - config:
      image_resource:
        source:
          repository: alpine
        type: docker-image
      inputs:
      - name: git
      outputs:
      - name: tagList
      platform: linux
      run:
        args:
        - -c
        - |-
          GIT_REF=`[ -f git/.git/ref ] && cat git/.git/ref || true`
          VERSION=`[ -f version/version ] && cat version/version || true`
          printf "%s %s latest" "$GIT_REF" "$VERSION" > tagList/tagList
          printf "Image will be tagged with: %s\n" $(cat tagList/tagList)
        path: /bin/sh
    task: create-tag-list
    timeout: 1h
  - config:
      image_resource:
        source:
          repository: concourse/oci-build-task
        type: registry-image
      inputs:
      - name: git
      - name: docker_build
      outputs:
      - name: image
      params:
        BUILD_ARG_ARTIFACTORY_PASSWORD: ((artifactory.password))
        BUILD_ARG_ARTIFACTORY_URL: ((artifactory.url))
        BUILD_ARG_ARTIFACTORY_USERNAME: ((artifactory.username))
        BUILD_ARG_PASSED_IN: SIMON
        BUILD_ARG_RUNNING_IN_CI: "true"
        CONTEXT: docker_build/e2e/concourse/docker-oci-build
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
        DOCKERFILE: docker_build/e2e/concourse/docker-oci-build/Dockerfile
      platform: linux
      run:
        args:
        - -c
        - |-
          mkdir ~/.docker
          echo $DOCKER_CONFIG_JSON > ~/.docker/config.json
          build
        path: /bin/sh
    privileged: true
    task: build
    timeout: 1h
  - config:
      image_resource:
        source:
          repository: aquasec/trivy
        type: docker-image
      inputs:
      - name: git
      - name: image
      - name: docker_build
      platform: linux
      run:
        args:
        - -c
        - |-
          [ -f .trivyignore ] && echo "Ignoring the following CVE's due to .trivyignore" || true
          [ -f .trivyignore ] && cat .trivyignore; echo || true
          trivy image --ignore-unfixed --severity CRITICAL --exit-code 0 --input ../../../../image/image.tar
        dir: docker_build/e2e/concourse/docker-oci-build
        path: /bin/sh
    task: trivy
    timeout: 1h
  - params:
      additional_tags: tagList/tagList
      image: image/image.tar
    put: simon-test-simple
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: different-build-and-file-folder
  plan:
  - attempts: 2
    get: git
    passed:
    - build-with-artifact-and-vars
    timeout: 15m
    trigger: true
  - config:
      image_resource:
        source:
          repository: alpine
        type: docker-image
      inputs:
      - name: git
      outputs:
      - name: tagList
      platform: linux
      run:
        args:
        - -c
        - |-
          GIT_REF=`[ -f git/.git/ref ] && cat git/.git/ref || true`
          VERSION=`[ -f version/version ] && cat version/version || true`
          printf "%s %s latest" "$GIT_REF" "$VERSION" > tagList/tagList
          printf "Image will be tagged with: %s\n" $(cat tagList/tagList)
        path: /bin/sh
    task: create-tag-list
    timeout: 1h
  - config:
      image_resource:
        source:
          repository: concourse/oci-build-task
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: image
      params:
        BUILD_ARG_ARTIFACTORY_PASSWORD: ((artifactory.password))
        BUILD_ARG_ARTIFACTORY_URL: ((artifactory.url))
        BUILD_ARG_ARTIFACTORY_USERNAME: ((artifactory.username))
        BUILD_ARG_RUNNING_IN_CI: "true"
        CONTEXT: git/e2e/concourse/docker-oci-build/buildFolder
        DOCKER_CONFIG_JSON: ((halfpipe-gcr.docker_config))
        DOCKERFILE: git/e2e/concourse/docker-oci-build/dockerFiles/randomDockerfile
      platform: linux
      run:
        args:
        - -c
        - |-
          mkdir ~/.docker
          echo $DOCKER_CONFIG_JSON > ~/.docker/config.json
          build
        path: /bin/sh
    privileged: true
    task: build
    timeout: 1h
  - config:
      image_resource:
        source:
          repository: aquasec/trivy
        type: docker-image
      inputs:
      - name: git
      - name: image
      platform: linux
      run:
        args:
        - -c
        - |-
          [ -f .trivyignore ] && echo "Ignoring the following CVE's due to .trivyignore" || true
          [ -f .trivyignore ] && cat .trivyignore; echo || true
          trivy image --ignore-unfixed --severity CRITICAL --exit-code 0 --input ../../../../image/image.tar
        dir: git/e2e/concourse/docker-oci-build
        path: /bin/sh
    task: trivy
    timeout: 1h
  - params:
      additional_tags: tagList/tagList
      image: image/image.tar
    put: different-folders
    timeout: 1h
  serial: true
resource_types:
- check_every: 24h
  name: gcp-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/gcp-resource
    tag: stable
    username: _json_key
  type: registry-image
resources:
- check_every: 10m
  name: git
  source:
    branch: main
    paths:
    - e2e/concourse/docker-oci-build
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 24h
  name: artifacts
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: halfpipe-team/halfpipe-e2e-docker-oci-build
    json_key: ((halfpipe-artifacts.private_key))
  type: gcp-resource
- check_every: 24h
  name: halfpipe-fly.thisismy-tag
  source:
    password: verysecret
    repository: springerplatformengineering/halfpipe_fly:thisIsMy_Tag
    username: uSeRnAmE
  type: registry-image
- check_every: 24h
  name: simon-test-simple
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/engineering-enablement/simon-test-simple
    username: _json_key
  type: registry-image
- check_every: 24h
  name: different-folders
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/engineering-enablement/different-folders
    username: _json_key
  type: registry-image
