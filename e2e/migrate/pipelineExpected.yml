# Generated using halfpipe cli version 0.0.0-DEV
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: update
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - attempts: 2
        get: git
        trigger: true
      - attempts: 2
        get: cron
        trigger: true
    timeout: 1h
  - attempts: 2
    config:
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-auto-update
          tag: latest
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      params:
        CONCOURSE_PASSWORD: ((concourse.password))
        CONCOURSE_TEAM: ((concourse.team))
        CONCOURSE_URL: ((concourse.url))
        CONCOURSE_USERNAME: ((concourse.username))
        HALFPIPE_DOMAIN: halfpipe.io
        HALFPIPE_PROJECT: halfpipe-io
        PIPELINE_NAME: halfpipe-e2e-migrate
      platform: linux
      run:
        dir: git/e2e/migrate
        path: update-pipeline
    task: update
    timeout: 1h
  - attempts: 2
    params:
      bump: minor
    put: version
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: CHANGE-ME OPTIONAL NAME IN CONCOURSE UI
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - attempts: 2
        get: git
        passed:
        - update
      - attempts: 2
        get: version
        passed:
        - update
        timeout: 1m
        trigger: true
    timeout: 1h
  - attempts: 1
    config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          repository: CHANGE-ME
          tag: tag
        type: registry-image
      inputs:
      - name: git
      - name: version
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          ./script
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/migrate
        path: /bin/sh
    task: change-me-optional-name-in-concourse-ui
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: CHANGE-ME OPTIONAL NAME IN CONCOURSE UI (1)
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - attempts: 2
        get: git
        passed:
        - CHANGE-ME OPTIONAL NAME IN CONCOURSE UI
      - attempts: 2
        get: version
        passed:
        - CHANGE-ME OPTIONAL NAME IN CONCOURSE UI
        timeout: 1m
        trigger: true
    timeout: 1h
  - attempts: 1
    config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          repository: CHANGE-ME
          tag: tag
        type: registry-image
      inputs:
      - name: git
      - name: version
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          ./script
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/migrate
        path: /bin/sh
    task: change-me-optional-name-in-concourse-ui-1
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: CHANGE-ME OPTIONAL NAME IN CONCOURSE UI (2)
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - attempts: 2
        get: git
        passed:
        - CHANGE-ME OPTIONAL NAME IN CONCOURSE UI
      - attempts: 2
        get: version
        passed:
        - CHANGE-ME OPTIONAL NAME IN CONCOURSE UI
        timeout: 1m
        trigger: true
    timeout: 1h
  - attempts: 1
    config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          repository: CHANGE-ME
          tag: tag
        type: registry-image
      inputs:
      - name: git
      - name: version
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          ./script
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/migrate
        path: /bin/sh
    task: change-me-optional-name-in-concourse-ui-2
    timeout: 1h
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  name: CHANGE-ME OPTIONAL NAME IN CONCOURSE UI (3)
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - attempts: 2
        get: git
        passed:
        - CHANGE-ME OPTIONAL NAME IN CONCOURSE UI (1)
        - CHANGE-ME OPTIONAL NAME IN CONCOURSE UI (2)
      - attempts: 2
        get: version
        passed:
        - CHANGE-ME OPTIONAL NAME IN CONCOURSE UI (1)
        - CHANGE-ME OPTIONAL NAME IN CONCOURSE UI (2)
        timeout: 1m
        trigger: true
    timeout: 1h
  - attempts: 1
    config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          repository: CHANGE-ME
          tag: tag
        type: registry-image
      inputs:
      - name: git
      - name: version
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      platform: linux
      run:
        args:
        - -c
        - |
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          export GIT_REVISION=`cat ../../.git/ref`
          export BUILD_VERSION=`cat ../../../version/version`

          ./script
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/migrate
        path: /bin/sh
    task: change-me-optional-name-in-concourse-ui-3
    timeout: 1h
  serial: true
resource_types:
- name: cron-resource
  source:
    repository: cftoolsmiths/cron-resource
    tag: v0.3
  type: registry-image
  unique_version_history: true
resources:
- check_every: 10m
  name: git
  source:
    branch: ""
    paths:
    - e2e/migrate
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/halfpipe.git
  type: git
- check_every: 1m
  name: cron
  source:
    expression: '* * * * *'
    fire_immediately: true
    location: UTC
  type: cron-resource
- name: version
  source:
    bucket: ((halfpipe-semver.bucket))
    driver: gcs
    json_key: ((halfpipe-semver.private_key))
    key: team-halfpipe-e2e-migrate-
  type: semver

